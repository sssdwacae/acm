const double eps =1e-8;
const double PI=acos(-1.0);

int sgn(double x)
{
    //平行 
    if(fabs(x)<eps)
        return 0;
    //相交方向
    if(x<0)
        return -1;
    else
        return 1;
}
//点的定义
struct Point
{
    double x,y;
    Point(){}
    Point(double _x,double _y){
        x=_x;y=_y;
    }
    //减法重载
    Point operator -(const Point &b)const{
        return Point(x-b.x,y-b.y);
    }
    //叉乘
    double operator ^(const Point &b)const{
        return x*b.y-y*b.x;
    }
    //点乘
    double operator *(const Point &b)const{
        return x*b.x+y*b.y;
    }   
};
//直线定义
struct Line
{
    Point s,e;
    Line(){}
    Line(Point _s,Point _e){
        s=_s;e=_e;
    }
};
//判断线段l1和l2是否相交
bool inter(Line l1,Line l2)
{
    return
    //快速排斥实验
    max(l1.s.x,l1.e.x) >= min(l2.s.x,l2.e.x) &&
    max(l2.s.x,l2.e.x) >= min(l1.s.x,l1.e.x) &&
    max(l1.s.y,l1.e.y) >= min(l2.s.y,l2.e.y) &&
    max(l2.s.y,l2.e.y) >= min(l1.s.y,l1.e.y) &&
    //跨立实验
    sgn((l2.s-l1.e)^(l1.s-l1.e))*sgn((l2.e-l1.e)^(l1.s-l1.e)) <= 0 &&
    sgn((l1.s-l2.e)^(l2.s-l2.e))*sgn((l1.e-l2.e)^(l2.s-l2.e)) <=0 ;
}

struct rectangle{
    int x1,y1,x2,y2;
    tangle(){}
    tangle(int _x1,int _y1,int _x2,int _y2){
        x1=_x1;y1=_y1;x2=_x2;y2=_y2;
    }
};

bool check_rectangle(rectangle a,rectangle b)//相交返回true
{
    return fabs(a.x1+a.x2-b.x1-b.x2) < a.x2-a.x1+b.x2-b.x1 
        && fabs(a.y1+a.y2-b.y1-b.y2) < a.y2-a.y1+b.y2-b.y1;
}